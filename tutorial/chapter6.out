ready> 
ready> Read extern: 
declare double @printd(double)


ready> 
ready> Read function definition:
define double @"binary:"(double %x, double %y) {
entry:
  ret double 0.000000e+00
}


ready> 
ready> Evaluated to 0.0D0
ready> 
ready> Read function definition:
define double @"unary!"(double %v) {
entry:
  %ifcond = fcmp ueq double %v, 0.000000e+00      ; <i1> [#uses=1]
  %iftmp = select i1 %ifcond, double 1.000000e+00, double 0.000000e+00 ; <double> [#uses=1]
  ret double %iftmp
}


ready> 
ready> Read function definition:
define double @unary-(double %v) {
entry:
  %subtmp = fsub double 0.000000e+00, %v          ; <double> [#uses=1]
  ret double %subtmp
}


ready> 
ready> Read function definition:
define double @"binary>"(double %LHS, double %RHS) {
entry:
  %cmptmp = fcmp ult double %RHS, %LHS            ; <i1> [#uses=1]
  %booltmp = uitofp i1 %cmptmp to double          ; <double> [#uses=1]
  ret double %booltmp
}


ready> 
ready> Read function definition:
define double @"binary|"(double %LHS, double %RHS) {
entry:
  %ifcond = fcmp ueq double %LHS, 0.000000e+00    ; <i1> [#uses=1]
  br i1 %ifcond, label %else, label %ifcont

else:                                             ; preds = %entry
  %ifcond1 = fcmp ueq double %RHS, 0.000000e+00   ; <i1> [#uses=1]
  %iftmp = select i1 %ifcond1, double 0.000000e+00, double 1.000000e+00 ; <double> [#uses=1]
  ret double %iftmp

ifcont:                                           ; preds = %entry
  ret double 1.000000e+00
}


ready> 
ready> Read function definition:
define double @"binary&"(double %LHS, double %RHS) {
entry:
  %unop = call double @"unary!"(double %LHS)      ; <double> [#uses=1]
  %ifcond = fcmp ueq double %unop, 0.000000e+00   ; <i1> [#uses=1]
  br i1 %ifcond, label %else, label %ifcont

else:                                             ; preds = %entry
  %unop1 = call double @"unary!"(double %RHS)     ; <double> [#uses=1]
  %unop2 = call double @"unary!"(double %unop1)   ; <double> [#uses=1]
  ret double %unop2

ifcont:                                           ; preds = %entry
  ret double 0.000000e+00
}


ready> 
ready> Read function definition:
define double @"binary="(double %LHS, double %RHS) {
entry:
  %cmptmp = fcmp ult double %LHS, %RHS            ; <i1> [#uses=1]
  %booltmp = uitofp i1 %cmptmp to double          ; <double> [#uses=1]
  %binop = call double @"binary>"(double %LHS, double %RHS) ; <double> [#uses=1]
  %binop1 = call double @"binary|"(double %booltmp, double %binop) ; <double> [#uses=1]
  %unop = call double @"unary!"(double %binop1)   ; <double> [#uses=1]
  ret double %unop
}


ready> 
ready> Read extern: 
declare double @putchard(double)


ready> Read function definition:
define double @printdensity(double %d) {
entry:
  %binop = call double @"binary>"(double %d, double 8.000000e+00) ; <double> [#uses=1]
  %ifcond = fcmp ueq double %binop, 0.000000e+00  ; <i1> [#uses=1]
  br i1 %ifcond, label %else, label %then

then:                                             ; preds = %entry
  %calltmp = call double @putchard(double 3.200000e+01) ; <double> [#uses=1]
  ret double %calltmp

else:                                             ; preds = %entry
  %binop1 = call double @"binary>"(double %d, double 4.000000e+00) ; <double> [#uses=1]
  %ifcond2 = fcmp ueq double %binop1, 0.000000e+00 ; <i1> [#uses=1]
  br i1 %ifcond2, label %else4, label %then3

then3:                                            ; preds = %else
  %calltmp6 = call double @putchard(double 4.600000e+01) ; <double> [#uses=1]
  ret double %calltmp6

else4:                                            ; preds = %else
  %binop7 = call double @"binary>"(double %d, double 2.000000e+00) ; <double> [#uses=1]
  %ifcond8 = fcmp ueq double %binop7, 0.000000e+00 ; <i1> [#uses=1]
  br i1 %ifcond8, label %else10, label %then9

then9:                                            ; preds = %else4
  %calltmp12 = call double @putchard(double 4.300000e+01) ; <double> [#uses=1]
  ret double %calltmp12

else10:                                           ; preds = %else4
  %calltmp13 = call double @putchard(double 4.200000e+01) ; <double> [#uses=1]
  ret double %calltmp13
}


ready> 
ready> Evaluated to 0.0D0
ready> 
ready> Read function definition:
define double @mandleconverger(double %real, double %imag, double %iters, double %creal, double %cimag) {
entry:
  %binop = call double @"binary>"(double %iters, double 2.550000e+02) ; <double> [#uses=1]
  %multmp = fmul double %real, %real              ; <double> [#uses=2]
  %multmp1 = fmul double %imag, %imag             ; <double> [#uses=2]
  %addtmp = fadd double %multmp, %multmp1         ; <double> [#uses=1]
  %binop2 = call double @"binary>"(double %addtmp, double 4.000000e+00) ; <double> [#uses=1]
  %binop3 = call double @"binary|"(double %binop, double %binop2) ; <double> [#uses=1]
  %ifcond = fcmp ueq double %binop3, 0.000000e+00 ; <i1> [#uses=1]
  br i1 %ifcond, label %else, label %ifcont

else:                                             ; preds = %entry
  %subtmp = fsub double %multmp, %multmp1         ; <double> [#uses=1]
  %addtmp6 = fadd double %subtmp, %creal          ; <double> [#uses=1]
  %multmp7 = fmul double %real, 2.000000e+00      ; <double> [#uses=1]
  %multmp8 = fmul double %multmp7, %imag          ; <double> [#uses=1]
  %addtmp9 = fadd double %multmp8, %cimag         ; <double> [#uses=1]
  %addtmp10 = fadd double %iters, 1.000000e+00    ; <double> [#uses=1]
  %calltmp = call double @mandleconverger(double %addtmp6, double %addtmp9, double %addtmp10, double %creal, double %cimag) ; <double> [#uses=1]
  ret double %calltmp

ifcont:                                           ; preds = %entry
  ret double %iters
}


ready> 
ready> Read function definition:
define double @mandleconverge(double %real, double %imag) {
entry:
  %calltmp = call double @mandleconverger(double %real, double %imag, double 0.000000e+00, double %real, double %imag) ; <double> [#uses=1]
  ret double %calltmp
}


ready> 
ready> Read function definition:
define double @mandelhelp(double %xmin, double %xmax, double %xstep, double %ymin, double %ymax, double %ystep) {
entry:
  br label %loop

loop:                                             ; preds = %afterloop, %entry
  %y = phi double [ %ymin, %entry ], [ %nextvar4, %afterloop ] ; <double> [#uses=3]
  br label %loop1

loop1:                                            ; preds = %loop1, %loop
  %x = phi double [ %xmin, %loop ], [ %nextvar, %loop1 ] ; <double> [#uses=3]
  %calltmp = call double @mandleconverge(double %x, double %y) ; <double> [#uses=1]
  %calltmp2 = call double @printdensity(double %calltmp) ; <double> [#uses=0]
  %nextvar = fadd double %x, %xstep               ; <double> [#uses=1]
  %cmptmp = fcmp ult double %x, %xmax             ; <i1> [#uses=1]
  br i1 %cmptmp, label %loop1, label %afterloop

afterloop:                                        ; preds = %loop1
  %calltmp3 = call double @putchard(double 1.000000e+01) ; <double> [#uses=1]
  %binop = call double @"binary:"(double 0.000000e+00, double %calltmp3) ; <double> [#uses=0]
  %nextvar4 = fadd double %y, %ystep              ; <double> [#uses=1]
  %cmptmp5 = fcmp ult double %y, %ymax            ; <i1> [#uses=1]
  br i1 %cmptmp5, label %loop, label %afterloop8

afterloop8:                                       ; preds = %afterloop
  ret double 0.000000e+00
}


ready> Read function definition:
define double @mandel(double %realstart, double %imagstart, double %realmag, double %imagmag) {
entry:
  %multmp = fmul double %realmag, 7.800000e+01    ; <double> [#uses=1]
  %addtmp = fadd double %multmp, %realstart       ; <double> [#uses=1]
  %multmp1 = fmul double %imagmag, 4.000000e+01   ; <double> [#uses=1]
  %addtmp2 = fadd double %multmp1, %imagstart     ; <double> [#uses=1]
  %calltmp = call double @mandelhelp(double %realstart, double %addtmp, double %realmag, double %imagstart, double %addtmp2, double %imagmag) ; <double> [#uses=1]
  ret double %calltmp
}

123.000000
456.000000
789.000000
**++. 
*******************************************************************************
*******************************************************************************
****************************************++++++*********************************
************************************+++++...++++++*****************************
*********************************++++++++.. ...+++++***************************
*******************************++++++++++..   ..+++++**************************
******************************++++++++++.     ..++++++*************************
****************************+++++++++....      ..++++++************************
**************************++++++++.......      .....++++***********************
*************************++++++++.   .            ... .++**********************
***********************++++++++...                     ++**********************
*********************+++++++++....                    .+++*********************
******************+++..+++++....                      ..+++********************
**************++++++. ..........                        +++********************
***********++++++++..        ..                         .++********************
*********++++++++++...                                 .++++*******************
********++++++++++..                                   .++++*******************
*******++++++.....                                    ..++++*******************
*******+........                                     ...++++*******************
*******+... ....                                     ...++++*******************
*******+++++......                                    ..++++*******************
*******++++++++++...                                   .++++*******************
*********++++++++++...                                  ++++*******************
**********+++++++++..        ..                        ..++********************
*************++++++.. ..........                        +++********************
******************+++...+++.....                      ..+++********************
*********************+++++++++....                    ..++*********************
***********************++++++++...                     +++*********************
*************************+++++++..   .            ... .++**********************
**************************++++++++.......      ......+++***********************
****************************+++++++++....      ..++++++************************
*****************************++++++++++..     ..++++++*************************
*******************************++++++++++..  ...+++++**************************
*********************************++++++++.. ...+++++***************************
***********************************++++++....+++++*****************************
***************************************++++++++********************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
******************************************************************+++++++++++++
****************************************************************+++++++++++++++
*************************************************************++++++++++++++++++
***********************************************************++++++++++++++++++++
********************************************************+++++++++++++++++++++++
******************************************************++++++++++++++++++++++...
***************************************************+++++++++++++++++++++.......
*************************************************++++++++++++++++++++..........
***********************************************+++++++++++++++++++...       ...
********************************************++++++++++++++++++++......         
******************************************++++++++++++++++++++.......          
***************************************+++++++++++++++++++++..........         
************************************++++++++++++++++++++++...........          
********************************++++++++++++++++++++++++.........              
***************************++++++++...........+++++..............              
*********************++++++++++++....  .........................               
***************+++++++++++++++++....   .........   ............                
***********+++++++++++++++++++++.....                   ......                 
********+++++++++++++++++++++++.......                                         
******+++++++++++++++++++++++++........                                        
****+++++++++++++++++++++++++.......                                           
***+++++++++++++++++++++++.........                                            
**++++++++++++++++...........                                                  
*++++++++++++................                                                  
*++++....................                                                      
*                                                                              
*++++....................                                                      
*++++++++++++................                                                  
**++++++++++++++++...........                                                  
***+++++++++++++++++++++++.........                                            
****+++++++++++++++++++++++++.......                                           
******+++++++++++++++++++++++++........                                        
********+++++++++++++++++++++++.......                                         
***********+++++++++++++++++++++.....                   ......                 
***************+++++++++++++++++....   .........   ............                
*********************++++++++++++....  .........................               
***************************++++++++...........+++++..............              
********************************++++++++++++++++++++++++.........              
************************************++++++++++++++++++++++...........          
***************************************+++++++++++++++++++++..........         
******************************************++++++++++++++++++++.......          
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
****************************+++++++++++++++++**********************************
***********************+++++++++++...++++++++++++******************************
********************+++++++++++++.. . .++++++++++++++**************************
*****************++++++++++++++++... ......++++++++++++************************
**************+++++++++++++++++++...   .......+++++++++++**********************
************++++++++++++++++++++....    .... ..++++++++++++********************
**********++++++++++++++++++++++......       ...++++++++++++*******************
********+++++++++++++++++++++++.......     .....++++++++++++++*****************
******++++++++++++++++++++++++.......      .....+++++++++++++++****************
****+++++++++++++++++++++++++.... .         .....+++++++++++++++***************
**+++++++++++++++++++++++++....                ...++++++++++++++++*************
*+++++++++++++++++++++++.......                ....++++++++++++++++*****
ready> 
ready> Evaluated to 0.0D0
ready> 
ready> Evaluated to 0.0D0
ready> 
ready> Evaluated to 0.0D0
ready> ; ModuleID = 'my cool jit'

declare double @printd(double)

define double @"binary:"(double %x, double %y) {
entry:
  ret double 0.000000e+00
}

define double @0() {
entry:
  %calltmp = call double @printd(double 1.230000e+02) ; <double> [#uses=1]
  %calltmp1 = call double @printd(double 4.560000e+02) ; <double> [#uses=1]
  %binop = call double @"binary:"(double %calltmp, double %calltmp1) ; <double> [#uses=1]
  %calltmp2 = call double @printd(double 7.890000e+02) ; <double> [#uses=1]
  %binop3 = call double @"binary:"(double %binop, double %calltmp2) ; <double> [#uses=1]
  ret double %binop3
}

define double @"unary!"(double %v) {
entry:
  %ifcond = fcmp ueq double %v, 0.000000e+00      ; <i1> [#uses=1]
  %iftmp = select i1 %ifcond, double 1.000000e+00, double 0.000000e+00 ; <double> [#uses=1]
  ret double %iftmp
}

define double @unary-(double %v) {
entry:
  %subtmp = fsub double 0.000000e+00, %v          ; <double> [#uses=1]
  ret double %subtmp
}

define double @"binary>"(double %LHS, double %RHS) {
entry:
  %cmptmp = fcmp ult double %RHS, %LHS            ; <i1> [#uses=1]
  %booltmp = uitofp i1 %cmptmp to double          ; <double> [#uses=1]
  ret double %booltmp
}

define double @"binary|"(double %LHS, double %RHS) {
entry:
  %ifcond = fcmp ueq double %LHS, 0.000000e+00    ; <i1> [#uses=1]
  br i1 %ifcond, label %else, label %ifcont

else:                                             ; preds = %entry
  %ifcond1 = fcmp ueq double %RHS, 0.000000e+00   ; <i1> [#uses=1]
  %iftmp = select i1 %ifcond1, double 0.000000e+00, double 1.000000e+00 ; <double> [#uses=1]
  ret double %iftmp

ifcont:                                           ; preds = %entry
  ret double 1.000000e+00
}

define double @"binary&"(double %LHS, double %RHS) {
entry:
  %unop = call double @"unary!"(double %LHS)      ; <double> [#uses=1]
  %ifcond = fcmp ueq double %unop, 0.000000e+00   ; <i1> [#uses=1]
  br i1 %ifcond, label %else, label %ifcont

else:                                             ; preds = %entry
  %unop1 = call double @"unary!"(double %RHS)     ; <double> [#uses=1]
  %unop2 = call double @"unary!"(double %unop1)   ; <double> [#uses=1]
  ret double %unop2

ifcont:                                           ; preds = %entry
  ret double 0.000000e+00
}

define double @"binary="(double %LHS, double %RHS) {
entry:
  %cmptmp = fcmp ult double %LHS, %RHS            ; <i1> [#uses=1]
  %booltmp = uitofp i1 %cmptmp to double          ; <double> [#uses=1]
  %binop = call double @"binary>"(double %LHS, double %RHS) ; <double> [#uses=1]
  %binop1 = call double @"binary|"(double %booltmp, double %binop) ; <double> [#uses=1]
  %unop = call double @"unary!"(double %binop1)   ; <double> [#uses=1]
  ret double %unop
}

declare double @putchard(double)

define double @printdensity(double %d) {
entry:
  %binop = call double @"binary>"(double %d, double 8.000000e+00) ; <double> [#uses=1]
  %ifcond = fcmp ueq double %binop, 0.000000e+00  ; <i1> [#uses=1]
  br i1 %ifcond, label %else, label %then

then:                                             ; preds = %entry
  %calltmp = call double @putchard(double 3.200000e+01) ; <double> [#uses=1]
  ret double %calltmp

else:                                             ; preds = %entry
  %binop1 = call double @"binary>"(double %d, double 4.000000e+00) ; <double> [#uses=1]
  %ifcond2 = fcmp ueq double %binop1, 0.000000e+00 ; <i1> [#uses=1]
  br i1 %ifcond2, label %else4, label %then3

then3:                                            ; preds = %else
  %calltmp6 = call double @putchard(double 4.600000e+01) ; <double> [#uses=1]
  ret double %calltmp6

else4:                                            ; preds = %else
  %binop7 = call double @"binary>"(double %d, double 2.000000e+00) ; <double> [#uses=1]
  %ifcond8 = fcmp ueq double %binop7, 0.000000e+00 ; <i1> [#uses=1]
  br i1 %ifcond8, label %else10, label %then9

then9:                                            ; preds = %else4
  %calltmp12 = call double @putchard(double 4.300000e+01) ; <double> [#uses=1]
  ret double %calltmp12

else10:                                           ; preds = %else4
  %calltmp13 = call double @putchard(double 4.200000e+01) ; <double> [#uses=1]
  ret double %calltmp13
}

define double @1() {
entry:
  %calltmp = call double @printdensity(double 1.000000e+00) ; <double> [#uses=1]
  %calltmp1 = call double @printdensity(double 2.000000e+00) ; <double> [#uses=1]
  %binop = call double @"binary:"(double %calltmp, double %calltmp1) ; <double> [#uses=1]
  %calltmp2 = call double @printdensity(double 3.000000e+00) ; <double> [#uses=1]
  %binop3 = call double @"binary:"(double %binop, double %calltmp2) ; <double> [#uses=1]
  %calltmp4 = call double @printdensity(double 4.000000e+00) ; <double> [#uses=1]
  %binop5 = call double @"binary:"(double %binop3, double %calltmp4) ; <double> [#uses=1]
  %calltmp6 = call double @printdensity(double 5.000000e+00) ; <double> [#uses=1]
  %binop7 = call double @"binary:"(double %binop5, double %calltmp6) ; <double> [#uses=1]
  %calltmp8 = call double @printdensity(double 9.000000e+00) ; <double> [#uses=1]
  %binop9 = call double @"binary:"(double %binop7, double %calltmp8) ; <double> [#uses=1]
  %calltmp10 = call double @putchard(double 1.000000e+01) ; <double> [#uses=1]
  %binop11 = call double @"binary:"(double %binop9, double %calltmp10) ; <double> [#uses=1]
  ret double %binop11
}

define double @mandleconverger(double %real, double %imag, double %iters, double %creal, double %cimag) {
entry:
  %binop = call double @"binary>"(double %iters, double 2.550000e+02) ; <double> [#uses=1]
  %multmp = fmul double %real, %real              ; <double> [#uses=2]
  %multmp1 = fmul double %imag, %imag             ; <double> [#uses=2]
  %addtmp = fadd double %multmp, %multmp1         ; <double> [#uses=1]
  %binop2 = call double @"binary>"(double %addtmp, double 4.000000e+00) ; <double> [#uses=1]
  %binop3 = call double @"binary|"(double %binop, double %binop2) ; <double> [#uses=1]
  %ifcond = fcmp ueq double %binop3, 0.000000e+00 ; <i1> [#uses=1]
  br i1 %ifcond, label %else, label %ifcont

else:                                             ; preds = %entry
  %subtmp = fsub double %multmp, %multmp1         ; <double> [#uses=1]
  %addtmp6 = fadd double %subtmp, %creal          ; <double> [#uses=1]
  %multmp7 = fmul double %real, 2.000000e+00      ; <double> [#uses=1]
  %multmp8 = fmul double %multmp7, %imag          ; <double> [#uses=1]
  %addtmp9 = fadd double %multmp8, %cimag         ; <double> [#uses=1]
  %addtmp10 = fadd double %iters, 1.000000e+00    ; <double> [#uses=1]
  %calltmp = call double @mandleconverger(double %addtmp6, double %addtmp9, double %addtmp10, double %creal, double %cimag) ; <double> [#uses=1]
  ret double %calltmp

ifcont:                                           ; preds = %entry
  ret double %iters
}

define double @mandleconverge(double %real, double %imag) {
entry:
  %calltmp = call double @mandleconverger(double %real, double %imag, double 0.000000e+00, double %real, double %imag) ; <double> [#uses=1]
  ret double %calltmp
}

define double @mandelhelp(double %xmin, double %xmax, double %xstep, double %ymin, double %ymax, double %ystep) {
entry:
  br label %loop

loop:                                             ; preds = %afterloop, %entry
  %y = phi double [ %ymin, %entry ], [ %nextvar4, %afterloop ] ; <double> [#uses=3]
  br label %loop1

loop1:                                            ; preds = %loop1, %loop
  %x = phi double [ %xmin, %loop ], [ %nextvar, %loop1 ] ; <double> [#uses=3]
  %calltmp = call double @mandleconverge(double %x, double %y) ; <double> [#uses=1]
  %calltmp2 = call double @printdensity(double %calltmp) ; <double> [#uses=0]
  %nextvar = fadd double %x, %xstep               ; <double> [#uses=1]
  %cmptmp = fcmp ult double %x, %xmax             ; <i1> [#uses=1]
  br i1 %cmptmp, label %loop1, label %afterloop

afterloop:                                        ; preds = %loop1
  %calltmp3 = call double @putchard(double 1.000000e+01) ; <double> [#uses=1]
  %binop = call double @"binary:"(double 0.000000e+00, double %calltmp3) ; <double> [#uses=0]
  %nextvar4 = fadd double %y, %ystep              ; <double> [#uses=1]
  %cmptmp5 = fcmp ult double %y, %ymax            ; <i1> [#uses=1]
  br i1 %cmptmp5, label %loop, label %afterloop8

afterloop8:                                       ; preds = %afterloop
  ret double 0.000000e+00
}

define double @mandel(double %realstart, double %imagstart, double %realmag, double %imagmag) {
entry:
  %multmp = fmul double %realmag, 7.800000e+01    ; <double> [#uses=1]
  %addtmp = fadd double %multmp, %realstart       ; <double> [#uses=1]
  %multmp1 = fmul double %imagmag, 4.000000e+01   ; <double> [#uses=1]
  %addtmp2 = fadd double %multmp1, %imagstart     ; <double> [#uses=1]
  %calltmp = call double @mandelhelp(double %realstart, double %addtmp, double %realmag, double %imagstart, double %addtmp2, double %imagmag) ; <double> [#uses=1]
  ret double %calltmp
}

define double @2() {
entry:
  %unop = call double @unary-(double 0x4002666660000000) ; <double> [#uses=1]
  %unop1 = call double @unary-(double 0x3FF4CCCCC0000000) ; <double> [#uses=1]
  %calltmp = call double @mandel(double %unop, double %unop1, double 0x3FA99999A0000000, double 0x3FB1EB8520000000) ; <double> [#uses=1]
  ret double %calltmp
}

define double @3() {
entry:
  %unop = call double @unary-(double 2.000000e+00) ; <double> [#uses=1]
  %unop1 = call double @unary-(double 1.000000e+00) ; <double> [#uses=1]
  %calltmp = call double @mandel(double %unop, double %unop1, double 0x3F947AE140000000, double 0x3FA47AE140000000) ; <double> [#uses=1]
  ret double %calltmp
}

define double @4() {
entry:
  %unop = call double @unary-(double 0x3FECCCCCC0000000) ; <double> [#uses=1]
  %unop1 = call double @unary-(double 0x3FF6666660000000) ; <double> [#uses=1]
  %calltmp = call double @mandel(double %unop, double %unop1, double 0x3F947AE140000000, double 0x3F9EB851E0000000) ; <double> [#uses=1]
  ret double %calltmp
}

